#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
udocker_setup
=============

udocker installer with rich CLI

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import sys
import os
import argparse
import logging
# if Python 3
if sys.version_info[0] >= 3:
    from configparser import ConfigParser
else:
    from ConfigParser import ConfigParser

__author__ = "udocker@lip.pt"
__copyright__ = "Copyright 2021, LIP"
__credits__ = ["udocker https://github.com/indigo-dc/udocker",
               "PRoot http://proot.me",
               "runC https://runc.io",
               "crun https://github.com/containers/crun",
               "Fakechroot https://github.com/dex4er/fakechroot",
               "Singularity http://singularity.lbl.gov"
              ]
__license__ = "Licensed under the Apache License, Version 2.0"
__version__ = "0.0.1"
__date__ = "2021"
STATUS_OK = 0
STATUS_ERROR = 1
LOG = logging.getLogger(__name__)


class Config(object):
    """Default configuration values for the whole application. Changes
    to these values should be made via a configuration file read via
    Config.init() and that can reside in ~/.udocker/udocker.conf
    """
    conf = dict()
    conf['verbose_level'] = 3
    conf['homedir'] = os.path.expanduser("~") + "/.udocker"
    conf['topdir'] = conf['homedir']
    conf['bindir'] = None
    conf['libdir'] = None
    conf['docdir'] = None
    conf['reposdir'] = None
    conf['layersdir'] = None
    conf['containersdir'] = None

    # udocker installation tarball the release is the minimum requirement
    # the actual tarball used in the installation can have a higher version
    conf['metadata_url'] = [
        "https://download.ncg.ingrid.pt/webdav/udocker/metadata.json"
        ]
    conf['installretry'] = 3
    conf['autoinstall'] = True
    conf['config'] = "udocker.conf"
    conf['keystore'] = "keystore"
    conf['tmpdir'] = os.getenv("TMPDIR", "/tmp")    # for tmp files only

    # Curl settings
    conf['http_proxy'] = ""    # ex. socks5://user:pass@127.0.0.1:1080
    conf['timeout'] = 12       # default timeout (secs)
    conf['download_timeout'] = 30 * 60  # file download timeout (secs)
    conf['ctimeout'] = 6       # default TCP connect timeout (secs)
    conf['http_agent'] = ""
    conf['http_insecure'] = False
    conf['use_curl_executable'] = ""  # force use of executable

    def _conf_file_read(self, cfpath, ignore_keys=None):
        """
        Read config file
        """
        LOG.info('Info: using config file: ', cfpath)
        cfnparser = ConfigParser()
        cfnparser.read(cfpath)
        for (key, val) in cfnparser.items('DEFAULT'):
            if ignore_keys and key in ignore_keys:
                continue
            if val is not None:
                Config.conf[key] = val

    def _file_override(self, user_cfile, ignore_keys=None):
        """
        Override values from config file
        """
        if os.path.exists('/etc/' + Config.conf['config']):
            self._conf_file_read('/etc/' + Config.conf['config'], ignore_keys)

        cfpath = Config.conf['homedir'] + '/' + Config.conf['config']
        if os.path.exists(cfpath):
            self._conf_file_read(cfpath, ignore_keys)

        if Config.conf['topdir'] != Config.conf['homedir']:
            cfpath = Config.conf['topdir'] + '/'  + Config.conf['config']
            if os.path.exists(cfpath):
                self._conf_file_read(cfpath, ignore_keys)

        if os.path.exists(user_cfile):
            self._conf_file_read(user_cfile, ignore_keys)

    def _env_override(self):
        """Override config with environment"""
        Config.conf['verbose_level'] = \
            int(os.getenv("UDOCKER_LOGLEVEL", Config.conf['verbose_level']))
        Config.conf['topdir'] = os.getenv("UDOCKER_DIR", Config.conf['topdir'])
        Config.conf['bindir'] = os.getenv("UDOCKER_BIN", Config.conf['bindir'])
        Config.conf['libdir'] = os.getenv("UDOCKER_LIB", Config.conf['libdir'])
        Config.conf['docdir'] = os.getenv("UDOCKER_DOC", Config.conf['docdir'])
        Config.conf['reposdir'] = \
            os.getenv("UDOCKER_REPOS", Config.conf['reposdir'])
        Config.conf['layersdir'] = \
            os.getenv("UDOCKER_LAYERS", Config.conf['layersdir'])
        Config.conf['containersdir'] = \
            os.getenv("UDOCKER_CONTAINERS", Config.conf['containersdir'])
        Config.conf['default_execution_mode'] = \
            os.getenv("UDOCKER_DEFAULT_EXECUTION_MODE",
                      Config.conf['default_execution_mode'])
        Config.conf['tmpdir'] = os.getenv("UDOCKER_TMP", Config.conf['tmpdir'])
        Config.conf['keystore'] = \
            os.getenv("UDOCKER_KEYSTORE", Config.conf['keystore'])
        Config.conf['use_curl_executable'] = \
            os.getenv("UDOCKER_USE_CURL_EXECUTABLE",
                      Config.conf['use_curl_executable'])

    def getconf(self, user_cfile="u.conf"):
        """Return all configuration variables"""
        self._file_override(user_cfile) # Override with variables in conf file
        self._env_override()          # Override with variables in environment

class SetupCLI(object):
    """Implements the command line interface.
    These methods correspond directly to the commands that can
    be invoked via the command line interface.
    """

    # def __init__(self):
    #     self.localrepo

    def do_version(self, args):
        '''version: Show version'''
        LOG.log(60, 'version: %s', __version__)
        return STATUS_OK

    def do_install(self, args):
        print('DOING Install')
        return STATUS_OK

    def do_show(self, args):
        print('DOING Show')
        return STATUS_OK

    def do_avail(self, args):
        pass

    def do_download(self, args):
        pass

    def do_download_all(self, args):
        pass

    def do_upgrade(self, args):
        pass

    def do_upgrade_all(self, args):
        pass

    def do_verify(self, args):
        pass

    def do_delete(self, args):
        pass

    def do_delete_all(self, args):
        pass

    def do_delete_metadata(self, args):
        pass

def main():
    """Program start and exception handling"""

    exit_status = STATUS_OK
    cli = SetupCLI()
    cmds_dict = {'version': cli.do_version, 'install': cli.do_install,
                 'show': cli.do_show, 'avail': cli.do_avail,
                 'download': cli.do_download, 
                 'download_all': cli.do_download_all,
                 'upgrade': cli.do_upgrade,
                 'upgrade_all': cli.do_upgrade_all,
                 'verify': cli.do_verify, 'delete': cli.do_delete,
                 'delete_all': cli.do_delete_all,
                 'delete_metadata': cli.do_delete_metadata}

    cmds = list(cmds_dict.keys())
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbose',
                       metavar='LEVEL',
                       help='verbosity level 0 (quiet) - 5 (debug)')
    group.add_argument('-q', '--quiet',
                       help='quiet (verbosity level 0)',
                       action='store_true')
    parser.add_argument('-c', '--conf',
                        metavar='conf',
                        help='use configuration file')
    parser.add_argument('cmd', help='Command',
                        choices=cmds)
    group.add_argument('--from',
                       metavar='url',
                       help='URL or local directory with modules')
    group.add_argument('--prefix',
                       metavar='dst_dir',
                       help='destination directory')
    parser.add_argument('-m', '--modules', metavar='modules', 
                        help='Modules', nargs='+')

    args = parser.parse_args()
    if args.conf:
        Config().getconf(args.conf)
    else:
        Config().getconf()

    LOG.setLevel(Config.conf['verbose_level'])
    exit_status = cmds_dict[args.cmd](args)
    sys.exit(exit_status)

if __name__ == "__main__":
    main()
